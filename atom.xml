<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ljh.name/"/>
  <updated>2017-03-28T07:05:57.000Z</updated>
  <id>http://ljh.name/</id>
  
  <author>
    <name>Li Jianhua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>composer整合github实现自动推送项目到packagist.org</title>
    <link href="http://ljh.name/2017/03/28/composer%E6%95%B4%E5%90%88github%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E9%A1%B9%E7%9B%AE%E5%88%B0packagist-org/"/>
    <id>http://ljh.name/2017/03/28/composer整合github实现自动推送项目到packagist-org/</id>
    <published>2017-03-28T05:36:30.000Z</published>
    <updated>2017-03-28T07:05:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><a href="https://getcomposer.org" target="_blank" rel="external">Composer</a><ul>
<li>PHP包管理工具（例如：Ruby的RubyGems, Nodejs的npm, Python的pip)</li>
</ul>
</li>
<li><a href="https://packagist.org" target="_blank" rel="external">Packagist.org</a><ul>
<li>composer  镜像</li>
<li>中国镜像地址：<a href="https://pkg.phpcomposer.com" target="_blank" rel="external">https://pkg.phpcomposer.com</a></li>
</ul>
</li>
<li><a href="https://www.github.com" target="_blank" rel="external">Github</a><ul>
<li><em>GitHub</em> 是一个面向开源及私有软件项目的托管平台，因为只支持 Git 作为唯一的版本库格式进行托管，故名 <em>GitHub</em>。</li>
</ul>
</li>
</ul>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h5 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h5><p>System：OS X EI Capitan (版本10.11.6)</p>
<ul>
<li><p>Composer</p>
<blockquote>
<p>安装Composer之前请确保安装了PHP</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ curl <span class="_">-s</span>S https://getcomposer.org/installer | php <span class="comment"># 下载composer</span></div><div class="line">&gt;  <span class="comment">#!/usr/bin/env php</span></div><div class="line">All settings correct <span class="keyword">for</span> using Composer</div><div class="line">Downloading...</div><div class="line">&gt;</div><div class="line">&gt;Composer successfully installed to: /root/composer.phar</div><div class="line">&gt;Use it: php composer.phar  <span class="comment"># 会下载一个composer.phar文件</span></div><div class="line">$ mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</div><div class="line">$ composer -V</div><div class="line">Composer version 1.1.1 <span class="comment"># 安装成功</span></div></pre></td></tr></table></figure>
<blockquote>
<p>如果下载不成功，可以 <a href="https://getcomposer.org/composer.phar" target="_blank" rel="external">download composer.phar</a></p>
</blockquote>
</li>
</ul>
<h5 id="提交composer-json-到github"><a href="#提交composer-json-到github" class="headerlink" title="提交composer.json 到github"></a>提交composer.json 到github</h5><ul>
<li><p>在GitHub创建项目</p>
<blockquote>
<p>默认你已经有Github账号，并且懂得git基本操作</p>
</blockquote>
<p><img src="http://ong8z3v18.bkt.clouddn.com/github-new-repo.png" alt="github-new-repo"></p>
</li>
</ul>
<p><img src="http://ong8z3v18.bkt.clouddn.com/github-create-repo.png" alt="github-create-repo"></p>
<ul>
<li><p>克隆项目到本地并且建立composer.json</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> https://github.com/lijianhua/demo.git demo <span class="comment"># 克隆项目</span></div><div class="line">$ <span class="built_in">cd</span> demo</div><div class="line">$ composer init <span class="comment"># 生成composer.json文件</span></div><div class="line"> Welcome to the Composer config generator  </div><div class="line">                                            </div><div class="line"></div><div class="line"></div><div class="line">This <span class="built_in">command</span> will guide you through creating your composer.json config.</div><div class="line"></div><div class="line">Package name (&lt;vendor&gt;/&lt;name&gt;) [root/demo]:lijianhua/demo<span class="comment"># 设置你的package 名字</span></div><div class="line">Description []: This a demo <span class="keyword">for</span> build composer packagist .<span class="comment"># 描述</span></div><div class="line">Author [Li Jianhua &lt;lijianhua_oop@163.com&gt;, n to skip]: <span class="comment"># 作者信息</span></div><div class="line">Minimum Stability []: dev <span class="comment"># 稳定版本</span></div><div class="line">Package Type (e.g. library, project, metapackage, composer-plugin) []: project <span class="comment"># package 类型</span></div><div class="line">License []: MIT <span class="comment"># 开源协议 有五种：(BSD，Apache，GPL，LGPL，MIT)</span></div><div class="line"></div><div class="line">Define your dependencies.</div><div class="line"></div><div class="line">Would you like to define your dependencies (require) interactively [yes]? no </div><div class="line"><span class="comment"># 是否有依赖于别的package, 这里选择no， 如果选yes会问以来名字和版本等</span></div><div class="line"></div><div class="line">&#123;                                                                                    </div><div class="line">    <span class="string">"name"</span>: <span class="string">"lijianhua/demo"</span>,                                                                                                                               </div><div class="line">    <span class="string">"description"</span>: <span class="string">"demo"</span>,                                                           </div><div class="line">    <span class="string">"type"</span>: <span class="string">"project"</span>,                                                               </div><div class="line">    <span class="string">"license"</span>: <span class="string">"MIT"</span>,                                                                </div><div class="line">    <span class="string">"authors"</span>: [                                                                     </div><div class="line">        &#123;                                                                            </div><div class="line">            <span class="string">"name"</span>: <span class="string">"Li Jianhua"</span>,                                                    </div><div class="line">            <span class="string">"email"</span>: <span class="string">"lijianhua_oop@163.com"</span>                                         </div><div class="line">        &#125;                                                                            </div><div class="line">    ],                                                                               </div><div class="line">    <span class="string">"minimum-stability"</span>: <span class="string">"dev"</span>,                                                      </div><div class="line">    <span class="string">"require"</span>: &#123;&#125;                                                                    </div><div class="line">&#125;    </div><div class="line">Do you confirm generation [yes]? yes</div><div class="line">Would you like the vendor directory added to your .gitignore [yes]? yes</div><div class="line">$ ls</div><div class="line">composer.json  </div><div class="line">$ git add composer.json</div><div class="line">$ git commit -am <span class="string">'first commit'</span></div><div class="line">$ git push -u origin master</div></pre></td></tr></table></figure>
<blockquote>
<p>现在你的项目就创建完毕了，并且提交到了Github上</p>
</blockquote>
<h5 id="建立GitHub和packagist-org的关联"><a href="#建立GitHub和packagist-org的关联" class="headerlink" title="建立GitHub和packagist.org的关联"></a>建立GitHub和packagist.org的关联</h5><ul>
<li><p>访问 packagist.org，并登陆，可以选择GitHub账号登陆,点击Submit</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/packagist-submit.png" alt="packagist-submit"></p>
</li>
<li><p>复制Github地址，点击check后如果没有重名点击submit</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/package-check.png" alt="package-check"></p>
<blockquote>
<p>提示我已经创建，如果你第一次提示已经被创建，修改composer.json里的name 并且提交到GitHub，重新验证直到成功为止</p>
</blockquote>
</li>
<li><p>提交成功后，出现如下页面</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/package-show.png" alt="package-show"></p>
</li>
<li><p>现在就可以通过命令来创建项目</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ composer create-project lijianhua/demo a dev-master --prefer-dist </div><div class="line">$ <span class="built_in">cd</span> a</div><div class="line">$ ls</div><div class="line">composer.json <span class="comment"># 代码已经成功创建到本地，</span></div></pre></td></tr></table></figure>
</li>
<li><p>接下来我们回到package 的创建目录：demo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> demo</div><div class="line">$ vim index.php <span class="comment"># 创建index.php 添加如下代码</span></div><div class="line">$ cat index.php</div><div class="line">&lt;?php</div><div class="line">  <span class="built_in">echo</span> <span class="string">'成功'</span>;</div><div class="line">?&gt;</div><div class="line">$ git add</div><div class="line">$ git commit -am <span class="string">'add index'</span></div><div class="line">$ git push origin master <span class="comment"># 此时查看GitHub，看见index.php已经提交</span></div><div class="line">$ <span class="built_in">cd</span> .. <span class="comment"># 退出demo目录</span></div><div class="line">$ composer create-project lijianhua/demo a2 dev-master --prefer-dist <span class="comment"># 创建项目a2</span></div><div class="line">$ <span class="built_in">cd</span> a2</div><div class="line">$ ls</div><div class="line">composer.json <span class="comment"># 发现没有index.php</span></div></pre></td></tr></table></figure>
<blockquote>
<p>这时我们手动点击下图的update</p>
</blockquote>
<p><img src="http://ong8z3v18.bkt.clouddn.com/package-show.png" alt="package-show"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ composer create-project lijianhua/demo a3 dev-master --prefer-dist <span class="comment"># 3</span></div><div class="line">$ <span class="built_in">cd</span> a3</div><div class="line">$ ls</div><div class="line">composer.json index.php <span class="comment"># 这时候index.php已经提交到packagist了</span></div></pre></td></tr></table></figure>
<blockquote>
<p>当然上述方法太过麻烦，下面我们展示自动推送</p>
</blockquote>
</li>
</ul>
<h5 id="GitHub自动推送项目到packagist"><a href="#GitHub自动推送项目到packagist" class="headerlink" title="GitHub自动推送项目到packagist"></a>GitHub自动推送项目到packagist</h5><ul>
<li><p>在Github 项目页点击setting，在出现的页面选择 services</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/github-setting.png" alt="github-setting"></p>
</li>
<li><p>点击add service, 在出现的框内选择packagist并添加</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/github-addservice.png" alt="github-addservice"></p>
</li>
<li><p>填写你的user 就是你的github用户名，Domain 就是 packagist的地址</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/github-package.png" alt="github-pack"></p>
</li>
<li><p>Token 在packagist 官网点击Profile-&gt;Show API Token，辅助内容到上图，保存就可以了。</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/package-token.png" alt="package-token"></p>
<blockquote>
<p>现在更新你demo后就会自动提交到packagist上，由于延迟等原因每次提交可能需要一点时间大概1分钟左右。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://getcomposer.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;
    
    </summary>
    
      <category term="技术学习" scheme="http://ljh.name/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="composer" scheme="http://ljh.name/tags/composer/"/>
    
      <category term="packagist" scheme="http://ljh.name/tags/packagist/"/>
    
      <category term="github" scheme="http://ljh.name/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>开源实时日志分析ELK平台实践</title>
    <link href="http://ljh.name/2017/03/26/%E5%BC%80%E6%BA%90%E5%AE%9E%E6%97%B6%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90ELK%E5%B9%B3%E5%8F%B0%E5%AE%9E%E8%B7%B5/"/>
    <id>http://ljh.name/2017/03/26/开源实时日志分析ELK平台实践/</id>
    <published>2017-03-26T14:14:14.000Z</published>
    <updated>2017-03-27T01:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>周末参加活动看见别人分享的<a href="https://leo108.com/pid-2256.asp" target="_blank" rel="external">MONOLOG优化及打造ELK友好的日志格式</a> ，会后了解了下ELK，看见网上最新的资料比较少，大多是过去的版本，不同版本的配置有些许区别，所以花了一点时间学习了下，记录下来分享一下，希望对你有用，话不多说，下面开始。</p>
<h4 id="ELK是什么？"><a href="#ELK是什么？" class="headerlink" title="ELK是什么？"></a>ELK是什么？</h4><blockquote>
<p>ELK由ElasticSearch、Logstash和Kiabana三个开源工具组成，作用是集中化管理日志，而且对于日志的统计、检索、排序等操作有很好的支持</p>
</blockquote>
<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote>
<p>ELK 官方网址 <a href="https://www.elastic.co/products" target="_blank" rel="external">https://www.elastic.co/products</a></p>
</blockquote>
<ul>
<li>Elasticsearch是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</li>
<li>Logstash是一个完全开源的工具，他可以对你的日志进行收集、分析，并将其存储供以后使用（如，搜索)。</li>
<li>Kibana 也是一个开源和免费的工具，他Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以帮助您汇总、分析和搜索重要数据日志。</li>
</ul>
<h4 id="为什么用ELK"><a href="#为什么用ELK" class="headerlink" title="为什么用ELK?"></a>为什么用ELK?</h4><p>日志主要包括系统日志、应用程序日志和安全日志。系统运维和开发人员可以通过日志了解服务器软硬件信息、检查配置过程中的错误及错误发生的原因。经常分析日志可以了解服务器的负荷，性能安全性，从而及时采取措施纠正错误。</p>
<p>通常，日志被分散的储存不同的设备上。如果你管理数十上百台服务器，你还在使用依次登录每台机器的传统方法查阅日志。这样是不是感觉很繁琐和效率低下。当务之急我们使用集中化的日志管理，例如：开源的syslog，将所有服务器上的日志收集汇总。</p>
<p>集中化管理日志后，日志的统计和检索又成为一件比较麻烦的事情，一般我们使用grep、awk和wc等Linux命令能实现检索和统计，但是对于要求更高的查询、排序和统计等要求和庞大的机器数量依然使用这样的方法难免有点力不从心。ELK完美的解决了如上问题，因此它是开发人员和运维人员不错的选择。<a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="external">以上内容来源网络</a></p>
<h4 id="ELK安装和配置"><a href="#ELK安装和配置" class="headerlink" title="ELK安装和配置"></a>ELK安装和配置</h4><h5 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h5><p>System：OS X EI Capitan (版本10.11.6)</p>
<p>ElasticSearch: 5.2.2</p>
<p>Logstash: 5.2.2</p>
<p>Kibana: 5.2.2</p>
<p>Java：java version “1.8.0_121”</p>
<blockquote>
<p>由于Logstash的运行依赖于Java环境， 推荐使用最新版本的Java。因为我们只需要Java的运行环境，所以可以只安装JRE，不过这里我依然使用JDK。</p>
<p>建议使用同一时期最细版本的ELK</p>
</blockquote>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ul>
<li><p>Java jdk</p>
<ul>
<li><p>地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK</a></p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/jdk.png" alt="jdk"></p>
</li>
<li><p>选择Accept License Agreement，选择你系统对应版本，这里我选择<a href="http://www.oracle.com/technetwork/java/javase/downloads/javascript: void(0" target="_blank" rel="external">jdk-8u121-macosx-x64.dmg</a>) 傻瓜版</p>
<blockquote>
<p>可能遇见问题，点击安装后一直显示正在验证，重启解决</p>
</blockquote>
</li>
<li><p>安装成功后，环境变量设置</p>
<ul>
<li><p>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home     </p>
</li>
<li><p>PATH=$JAVA_HOME/bin:$PATH  </p>
</li>
<li><p>CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</p>
</li>
<li><p>export    JAVA_HOME, PATH, CLASSPATH</p>
<blockquote>
<p>把环境变量加入你用的shell，我的的zsh，例如vim .zshrc                                   </p>
</blockquote>
</li>
<li><p>接下来验证JAVA是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ java -version</div><div class="line">java version <span class="string">"1.8.0_121"</span></div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_121-b13)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.121-b13, mixed mode)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>Logstash </p>
<ul>
<li><p>地址：<a href="https://www.elastic.co/downloads，" target="_blank" rel="external">https://www.elastic.co/downloads，</a> 我们可以看到ELK三个产品</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/elastic.png" alt="elastic"></p>
</li>
<li><p>点击 Download，选择你系统对应的文件下载，这里我选择的tar.gz</p>
</li>
<li><p>下载完成后解压到你指定的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ tar -zxf logstash-5.2.2.tar -C /usr/<span class="built_in">local</span>/</div><div class="line">$ /usr/<span class="built_in">local</span>/logstash-5.2.2/bin/logstash <span class="_">-e</span> <span class="string">"input &#123;stdin&#123;&#125;&#125; output &#123;stdout&#123;&#125;&#125;"</span> <span class="comment">#通过-e参数指定logstash的配置信息，用于快速测试，直接输出到屏幕</span></div><div class="line">Sending Logstash<span class="string">'s logs to /usr/local/logstash-5.2.2/logs which is now configured via log4j2.properties</span></div><div class="line">[2017-03-26T21:09:36,336][INFO ][logstash.pipeline        ] Starting pipeline &#123;"id"=&gt;"main", "pipeline.workers"=&gt;4, "pipeline.batch.size"=&gt;125, "pipeline.batch.delay"=&gt;5, "pipeline.max_inflight"=&gt;500&#125;</div><div class="line">[2017-03-26T21:09:36,371][INFO ][logstash.pipeline        ] Pipeline main started</div><div class="line">The stdin plugin is now waiting for input:</div><div class="line">[2017-03-26T21:09:36,512][INFO ][logstash.agent           ] Successfully started Logstash API endpoint &#123;:port=&gt;9600&#125;</div><div class="line">my name is lijianhua # 手动输入回车等待几秒返回结果</div><div class="line">2017-03-26T13:09:49.174Z Gubler.lan my name is lijianhua</div></pre></td></tr></table></figure>
<blockquote>
<p>以上logstash 安装成功了</p>
</blockquote>
</li>
<li><p>logstash有两个常用的参数</p>
<ul>
<li>-e :指定logstash的配置信息，可以用于快速测试</li>
<li>-f :指定logstash的配置文件；可以用于生产环境</li>
</ul>
</li>
</ul>
</li>
<li><p>Elasticsearch</p>
<ul>
<li><p>点击 Download，选择你系统对应的文件下载，这里我选择的tar</p>
</li>
<li><p>下载完成后解压到你指定的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ tar -zxf elasticsearch-5.2.2.tar -C /usr/<span class="built_in">local</span>/</div><div class="line">$ vim /usr/<span class="built_in">local</span>/elasticsearch-1.7.2/config/elasticsearch.yml <span class="comment"># 修改配置信息，去掉'#'号</span></div><div class="line">cluster.name=elasticsearch</div><div class="line">配置的集群名称，默认是elasticsearch，es服务会通过广播方式自动连接在同一网段下的es服务，通过多播方式进行通信，同一网段下可以有多个集群，通过集群名称这个属性来区分不同的集群。</div><div class="line">node.name=node0</div><div class="line">当前配置所在机器的节点名，你不设置就默认随机指定一个name列表中名字，该name列表在es的jar包中config文件夹里name.txt文件中，其中有很多作者添加的有趣名字</div><div class="line">network.port=9200</div><div class="line">设置对外服务的http端口，默认为9200。</div><div class="line">$ /usr/<span class="built_in">local</span>/elasticsearch-5.2.2/bin/elasticsearch</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://www.cnblogs.com/hanyouchun/p/5163183.html" target="_blank" rel="external">更多配置信息参考</a> </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">浏览器输入：http://localhost:9200，输出如下信息：</div><div class="line">&#123;</div><div class="line">  &quot;name&quot; : &quot;node-1&quot;,</div><div class="line">  &quot;cluster_name&quot; : &quot;test-elasticsearch&quot;,</div><div class="line">  &quot;cluster_uuid&quot; : &quot;kimjdc71S6W54DXaB3Fl0A&quot;,</div><div class="line">  &quot;version&quot; : &#123;</div><div class="line">    &quot;number&quot; : &quot;5.2.2&quot;,</div><div class="line">    &quot;build_hash&quot; : &quot;f9d9b74&quot;,</div><div class="line">    &quot;build_date&quot; : &quot;2017-02-24T17:26:45.835Z&quot;,</div><div class="line">    &quot;build_snapshot&quot; : false,</div><div class="line">    &quot;lucene_version&quot; : &quot;6.4.1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</div><div class="line">&#125;</div><div class="line">安装成功</div></pre></td></tr></table></figure>
</li>
<li><p>安装Elasticsearch HEAD插件</p>
<blockquote>
<p>elasticsearch-head是一个elasticsearch的集群管理工具，它是完全由HTML5编写的独立网页程序，你可以通过插件把它集成到ES</p>
<p>网上安装方法很多，没几个成功的，可能是版本原因，所以我直接从Github上下一个</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">clone</span> git://github.com/mobz/elasticsearch-head.git</div><div class="line">$ <span class="built_in">cd</span> elasticsearch-head</div><div class="line">$ npm install <span class="comment"># 由于head基于nodejs</span></div><div class="line">$ grunt server</div><div class="line"><span class="comment"># 浏览器访问 http://localhost:9100/</span></div></pre></td></tr></table></figure>
<p><img src="http://ong8z3v18.bkt.clouddn.com/es-head.png" alt="es-head"></p>
<blockquote>
<p>这里可能遇见问题 “集群健康值: 未连接”</p>
<p>修改elasticsearch.yml文件</p>
<p><code># 增加如下字段</code></p>
<p><code>http.cors.enabled: ``true</code></p>
<p><code>http.cors.allow-origin: ``&quot;*&quot;</code></p>
<p>重启ES和HEAD就可以了</p>
</blockquote>
<p><img src="http://ong8z3v18.bkt.clouddn.com/es-head-1.png" alt="es-head-1"></p>
<ul>
<li>切换到Browser标签</li>
</ul>
<p><img src="http://ong8z3v18.bkt.clouddn.com/es-head-2.png" alt="es-head-2"></p>
<ul>
<li>单击某一个文档（doc），则会展示该文档的所有信息</li>
</ul>
<p><img src="http://ong8z3v18.bkt.clouddn.com/es-head-3.png" alt="es-head-2"></p>
</li>
</ul>
</li>
<li><p>Kinaba</p>
<ul>
<li><p>点击 Download，选择你系统对应的文件下载，这里我选择的mac，下载完是.tar文件</p>
</li>
<li><p>下载完成后解压到你指定的目录</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ tar -zxf kibana-5.2.2-darwin-x86_64.tar -C /usr/<span class="built_in">local</span>/</div><div class="line">$ /usr/<span class="built_in">local</span>/kibana-5.2.2-darwin-x86_64/bin/kibana</div><div class="line">浏览器访问http://localhost:5601/ 就可以查看安装成功了</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://ong8z3v18.bkt.clouddn.com/kibana.png" alt="kinaba"></p>
</li>
</ul>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote>
<p>先在我们ELK都安装完了，接下来是如何关联在一起了</p>
</blockquote>
<ul>
<li><p>Logstash 配置</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/logstash-5.2.2/config</div><div class="line">$ vim elasticsearche.conf <span class="comment">#新建配置文件</span></div><div class="line">$ cat elasticsearche.conf</div><div class="line">input &#123;</div><div class="line">  file &#123;</div><div class="line">        path =&gt; <span class="string">"/myapp/storage/logs/lumen.log"</span> <span class="comment"># 日志文件目录</span></div><div class="line">        start_position =&gt; <span class="string">"beginning"</span> <span class="comment">#从文件开始处读写</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line">filter &#123;</div><div class="line">  <span class="comment">#定义数据的格式</span></div><div class="line">  grok &#123;</div><div class="line">    match =&gt; &#123; <span class="string">"message"</span> =&gt;</div><div class="line"><span class="string">"%&#123;DATA:timestamp&#125;\|%&#123;IP:serverIp&#125;\|%&#123;IP:clientIp&#125;\|%&#123;DATA:logSource&#125;\|%&#123;DATA:userId&#125;\|%&#123;DATA:reqUrl&#125;\|%&#123;DATA:reqUri&#125;\|%&#123;DATA:refer&#125;\|%&#123;DATA:device&#125;\|%&#123;DATA:textDuring&#125;\|%&#123;DATA:duringTime:int&#125;\|\|"</span> &#125;</div><div class="line">	// 对应的日志格式为</div><div class="line">	/**</div><div class="line">	2015-05-07-16:03:04|10.4.29.158|120.131.74.116|WEB|11299073|http://quxue.renren.com/shareApp?isappinstalled=0&amp;userId=11299073&amp;from=groupmessage|/shareApp|null|Mozilla/5.0 (iPhone; CPU iPhone OS 8_2 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12D508 MicroMessenger/6.1.5 NetType/WIFI|duringTime|98||</div><div class="line">	*/</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">output &#123;</div><div class="line">  <span class="comment">#将输出保存到elasticsearch，如果没有匹配到时间就不保存，因为日志里的网址参数有些带有换行, 注意网上有的配置写的是host，总会报错，查了下在某一版本改成了hosts</span></div><div class="line">  <span class="keyword">if</span> [timestamp] =~ /^\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;/ &#123;</div><div class="line">        elasticsearch &#123; hosts =&gt; localhost&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>定义数据格式很重要，不然会匹配不出你的日志至于如何写，参考<a href="https://github.com/elastic/logstash/blob/v1.4.2/patterns/grok-patterns" target="_blank" rel="external">elastic/logstash</a> 这个是定义好的</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ /usr/<span class="built_in">local</span>/logstash-5.2.2/bin/logstash <span class="_">-f</span> /usr/<span class="built_in">local</span>/logstash-5.2.2/config/elasticsearche.conf </div><div class="line"><span class="comment">#以这个配置文件运行logstash</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>Kinaba 配置</p>
<ul>
<li><p>第一次访问kibana会重定向到设置索引的页面,如果输入logstash-*就是匹配所有的索引，还可以指定日期，logstash的索引是按日期区分的，一个日期一个文件夹</p>
</li>
<li><p>create 之后点击Discover就可以查看分组的日志和实时日志。</p>
<p><img src="http://ong8z3v18.bkt.clouddn.com/kibana-discover.png" alt="kibana-discover"></p>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>参考文章：<a href="http://baidu.blog.51cto.com/71938/1676798" target="_blank" rel="external">http://baidu.blog.51cto.com/71938/1676798</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末参加活动看见别人分享的&lt;a href=&quot;https://leo108.com/pid-2256.asp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MONOLOG优化及打造ELK友好的日志格式&lt;/a&gt; ，会后了解了下ELK，看见网上最新的资料比较少，
    
    </summary>
    
      <category term="技术学习" scheme="http://ljh.name/categories/%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ELK" scheme="http://ljh.name/tags/ELK/"/>
    
      <category term="ElasticSearch" scheme="http://ljh.name/tags/ElasticSearch/"/>
    
      <category term="Logstash" scheme="http://ljh.name/tags/Logstash/"/>
    
      <category term="Kiabana" scheme="http://ljh.name/tags/Kiabana/"/>
    
  </entry>
  
  <entry>
    <title>Docker——初探</title>
    <link href="http://ljh.name/2017/03/24/Docker%E2%80%94%E2%80%94%E5%88%9D%E6%8E%A2/"/>
    <id>http://ljh.name/2017/03/24/Docker——初探/</id>
    <published>2017-03-24T06:13:45.000Z</published>
    <updated>2017-03-24T07:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>想要学习是我写这篇博文的原因，虽然我暂时在开发中用不到Docker，但是为了开阔视野我想也应该了解下，学习是没有坏处的</p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="external">Docker</a>解释有很多，这里我就不照搬了，否则我的这篇博文都是介绍了，大概解释是：Docker 使用的Google的go语言开发实现，现在是开源的，主要代码是<a href="https://github.com/docker/docker" target="_blank" rel="external">Github</a> 上进行维护，是<a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="external">操作系统层面的虚拟化技术</a> 。</p>
<h4 id="为什么用Docker"><a href="#为什么用Docker" class="headerlink" title="为什么用Docker"></a>为什么用Docker</h4><blockquote>
<p>多数优点都是对应虚拟机而言</p>
</blockquote>
<ul>
<li>更高效的利用系统资源</li>
<li>更快的启动时间</li>
<li>一致的运行环境<ul>
<li>这个我认为最重要，在开发，测试，生产保持环境一致，不会因为系统导致 <em>“这段代码在我机器上没问题啊”</em> 这类问题。</li>
</ul>
</li>
<li>持续交付和部署</li>
<li>更轻松的迁移<ul>
<li>Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。</li>
</ul>
</li>
<li>更轻松的维护和扩展</li>
</ul>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/image.html" target="_blank" rel="external">Docker 镜像</a> (Image)</p>
<blockquote>
<p>Docker 镜像是一个特殊的文件系统，是由一组文件系统组成，或者说，由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p>
</blockquote>
</li>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/container.html" target="_blank" rel="external">Docker 容器</a> (Container)</p>
<blockquote>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的<code>类</code>和<code>实例</code>一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
</blockquote>
</li>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/repository.html" target="_blank" rel="external">Docker 仓库</a> (Registry)</p>
<blockquote>
<p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://docs.docker.com/registry/" target="_blank" rel="external">Docker Registry</a> 就是这样的服务。</p>
<blockquote>
<p>我的理解是Docker Registry 就是一个Github，每个软件或者系统就是一个项目，项目有标签就是每个软件的版本。当然这里的Registry 也有公开服务和私有服务。</p>
</blockquote>
</blockquote>
</li>
</ul>
<ul>
<li>参考文章：<ul>
<li><a href="https://www.gitbook.com/book/yeasy/docker_practice" target="_blank" rel="external">Docker 从入门到实践</a> </li>
<li><a href="http://www.infoq.com/cn/articles/docker-container-management-libcontainer-depth-analysis" target="_blank" rel="external">Docker背后的容器管理——Libcontainer深度解析</a>  这个可以加深了解容器是什么。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;想要学习是我写这篇博文的原因，虽然我暂时在开发中用不到Docker，但是为了开阔视野我想也应该了解下，学习是没有坏处的&lt;/p&gt;
&lt;h4 id
    
    </summary>
    
      <category term="Docker" scheme="http://ljh.name/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://ljh.name/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理和负载均衡</title>
    <link href="http://ljh.name/2017/03/23/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://ljh.name/2017/03/23/Nginx反向代理和负载均衡/</id>
    <published>2017-03-23T10:03:29.000Z</published>
    <updated>2017-03-24T03:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>正向代理</p>
<ul>
<li>明确知道要访问的网站</li>
<li>A服务器可以访问C，访客可以访问服务器A，不可以访问服务器C，A为代理服务器</li>
</ul>
</li>
<li><p>反向代理</p>
<ul>
<li>不知道所访问真实服务器</li>
<li>访客可以访问服务器A，服务器A无数据，服务器A从其他服务器中读取数据并且返回给访客</li>
</ul>
</li>
<li><p>负载均衡</p>
<p><code>服务器压力过大会使服务器崩溃,通过负载均衡来分担服务器压力，通过反向代理来实现的</code></p>
</li>
<li><p>Nginx 负载均衡的实现</p>
<ul>
<li>Nginx可以通过反向代理实现负载均衡，用户的访问首先会访问到Nginx服务器，然后Nginx选择压力较小的服务器，并且访问的是未崩溃的服务器。</li>
<li>upstream name 配置代理服务器</li>
</ul>
</li>
<li><p>HTTP Upstream 模块</p>
<ul>
<li>Upstream 模块是Nginx服务器的一个重要模块，Upstream模块实现在轮询和客户端IP之间实现后端的负载均衡</li>
<li>常用指令ip_hash, server, Upstream</li>
<li>ip_hash：在负载均衡系统中，假如用户在某台服务器上登录，那么如果该用户第二次请求时候，因为负载均衡系统，每次请求都会重新定位到一个新服务器，显然不可以，可以采用Ip_hash指令解决这个问题，第二次请求会通过哈希算法自动定位到第一次登录的服务器。</li>
<li>server：server指令主要用于指定服务器的名称和参数，通过参数设置不同服务器的权重</li>
<li>upstream：主要是用于设置一组可以在proxy_pass和fastcgi_pass指令中使用代理服务器，默认负载均衡方式为轮询</li>
</ul>
</li>
<li><p>其他负载均衡的方法</p>
<ul>
<li>除了使用Nginx服务器实现外，还有很多方式，软件实现和硬件实现，软件分服务器软件、系统软件、应用软件，根据反向代理的中间相关。</li>
</ul>
</li>
<li><p>负载均衡实现小结</p>
<ul>
<li><p>硬件实现负载均衡：效率高，成本高</p>
</li>
<li><p>软件实现负载均衡：效率相对低，成本低（nginx）</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;正向代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确知道要访问的网站&lt;/li&gt;
&lt;li&gt;A服务器可以访问C，访客可以访问服务器A，不可以访问服务器C，A为代理服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反向代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不知道所访问真实服
    
    </summary>
    
      <category term="Nginx" scheme="http://ljh.name/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://ljh.name/tags/Nginx/"/>
    
      <category term="反向代理" scheme="http://ljh.name/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="http://ljh.name/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建HEXO</title>
    <link href="http://ljh.name/2017/03/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAHEXO/"/>
    <id>http://ljh.name/2017/03/21/从零开始搭建HEXO/</id>
    <published>2017-03-21T02:54:50.000Z</published>
    <updated>2017-03-24T04:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一直有搭建个人博客的想法，并几次都付诸行动，以前用过<a href="https://wordpress.com/" target="_blank" rel="external">Wordpress</a>, <a href="http://typecho.org" target="_blank" rel="external">Typecho</a>，最后都因为各种原因下线或者放弃了，其中各种插件的以及部署问题已经忙的焦头烂额，最近又一次燃起了搭建个人博客的想法，通过各种产品之间的比较，最后我选中了<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>，选中它的最大原因是因为不需要数据库，而且对环境要求较少。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>我使用Mac系统，安装Hexo时候的版本是hexo: 3.2.2，其他系统替换相应命令即可。</p>
<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>虽然Hexo对环境要求较少，但是安装前还是需要一些准备的</p>
<ul>
<li>Node.js<ul>
<li>Windows：<a href="https://nodejs.org/" target="_blank" rel="external">nodejs</a>官网安装</li>
<li>Mac：brew install node</li>
<li>Linux：curl <a href="https://raw.github.com/creationix/nvm/master/install.sh" target="_blank" rel="external">https://raw.github.com/creationix/nvm/master/install.sh</a> | sh</li>
</ul>
</li>
<li>Git<ul>
<li>Windows：下载安装  <a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a></li>
<li>Mac： brew install git</li>
<li>Linux：sudo apt-get install git</li>
</ul>
</li>
<li>Github：如果有就忽略，没有去注册个<a href="https://www.github.com" target="_blank" rel="external">github</a></li>
</ul>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>前面的准备完成就开始正式安装Hexo，在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装完成输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div><div class="line">hexo: 3.2.2</div></pre></td></tr></table></figure>
<p>出现hexo版本就安装成功了。</p>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>输入如下命令，<folder> 项目目录名称：</folder></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment"># 或者hexo generate</span></div></pre></td></tr></table></figure>
<p>启动本地web服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s <span class="comment"># 或者hexo server</span></div></pre></td></tr></table></figure>
<p>在浏览器访问<a href="http://localhost:4000，就可以看到博客了" target="_blank" rel="external">http://localhost:4000，就可以看到博客了</a></p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></div><div class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面 例如about /source/about/index.md</span></div></pre></td></tr></table></figure>
<h4 id="Hexo-主题安装"><a href="#Hexo-主题安装" class="headerlink" title="Hexo 主题安装"></a>Hexo 主题安装</h4><p>我使用的是<a href="https://github.com/Ben02/hexo-theme-Anatole" target="_blank" rel="external">Anatole</a>这个主题，更多主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">官网主题</a>选择，以下是主题安装方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Ben02/hexo-theme-Anatole theme/anatole</div></pre></td></tr></table></figure>
<p>启用主题</p>
<p>在根目录的_config.yml配置中的theme属性，将其设置为anatole，主题所有的配置在<code>:</code>后都要有一个空格</p>
<p>更新主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> theme/anatole</div><div class="line">$ git pull</div><div class="line">$ hexo g <span class="comment">#生成静态</span></div><div class="line">$ hexo s <span class="comment">#启动本地web服务</span></div></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:4000，就可以看见新的主题了" target="_blank" rel="external">http://localhost:4000，就可以看见新的主题了</a></p>
<h4 id="Github-Pages-设置"><a href="#Github-Pages-设置" class="headerlink" title="Github Pages 设置"></a>Github Pages 设置</h4><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，可以用来用来做搭建一个博客</p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io/" target="_blank" rel="external">http://username.github.io</a> 来访问你的个人主页。</p>
<p>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的，而且只能在master分支。</p>
<p>申请方式可以建立其他的仓库一样，只要把以<a href="http://username.github.io来命名就可以了（username" target="_blank" rel="external">http://username.github.io来命名就可以了（username</a> 即你的账户名）。</p>
<p>下面就开始部署本地的博客到github：</p>
<ul>
<li><p>打开根目录的_config.yml，文件找到Deployment，配置如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:                                                                              </div><div class="line">  <span class="built_in">type</span>: git                                                                                                                                                 </div><div class="line">  repo: https://github.com/username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>保存后执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save <span class="comment"># 部署到远程需要安装的包</span></div><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy <span class="comment"># Hexo部署到远程</span></div></pre></td></tr></table></figure>
<p>这时查看代码库就可以看到代码已经在github上了，访问<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>   就可以看到你的博客了</p>
</li>
</ul>
<h4 id="如何用自己的域名来访问博客"><a href="#如何用自己的域名来访问博客" class="headerlink" title="如何用自己的域名来访问博客"></a>如何用自己的域名来访问博客</h4><p>在source目录下添加CNAME文件，操作步骤如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/</div><div class="line">$ vim CNAME <span class="comment"># 输入你的域名在CNAME文件下</span></div><div class="line">$ hexo clean <span class="comment"># 返回根目录执行</span></div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy <span class="comment"># Hexo部署到远程</span></div></pre></td></tr></table></figure>
<p>添加解析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">记录类型 	主机记录 	解析线路(运营商) 	记录值	</div><div class="line">CNAME	     www	       默认	username.github.io</div></pre></td></tr></table></figure>
<p>如果不生效添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">记录类型 	主机记录 	解析线路(运营商) 	记录值	</div><div class="line">	A	     @	       默认	        192.30.252.154</div><div class="line">	A	     @	       默认	        192.30.252.153</div></pre></td></tr></table></figure>
<p>访问你的域名就可以看到你的博客了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;一直有搭建个人博客的想法，并几次都付诸行动，以前用过&lt;a href=&quot;https://wordpress.com/&quot; target=&quot;_bl
    
    </summary>
    
    
      <category term="Hexo" scheme="http://ljh.name/tags/Hexo/"/>
    
      <category term="Typecho" scheme="http://ljh.name/tags/Typecho/"/>
    
      <category term="Wordpress" scheme="http://ljh.name/tags/Wordpress/"/>
    
      <category term="Github" scheme="http://ljh.name/tags/Github/"/>
    
      <category term="Blog" scheme="http://ljh.name/tags/Blog/"/>
    
  </entry>
  
</feed>
