<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ljh.name/"/>
  <updated>2017-03-24T07:07:41.000Z</updated>
  <id>http://ljh.name/</id>
  
  <author>
    <name>Li Jianhua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker——初探</title>
    <link href="http://ljh.name/2017/03/24/Docker%E2%80%94%E2%80%94%E5%88%9D%E6%8E%A2/"/>
    <id>http://ljh.name/2017/03/24/Docker——初探/</id>
    <published>2017-03-24T06:13:45.000Z</published>
    <updated>2017-03-24T07:07:41.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>想要学习是我写这篇博文的原因，虽然我暂时在开发中用不到Docker，但是为了开阔视野我想也应该了解下，学习是没有坏处的</p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p><a href="https://yeasy.gitbooks.io/docker_practice/introduction/what.html" target="_blank" rel="external">Docker</a>解释有很多，这里我就不照搬了，否则我的这篇博文都是介绍了，大概解释是：Docker 使用的Google的go语言开发实现，现在是开源的，主要代码是<a href="https://github.com/docker/docker" target="_blank" rel="external">Github</a> 上进行维护，是<a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization" target="_blank" rel="external">操作系统层面的虚拟化技术</a> 。</p>
<h4 id="为什么用Docker"><a href="#为什么用Docker" class="headerlink" title="为什么用Docker"></a>为什么用Docker</h4><blockquote>
<p>多数优点都是对应虚拟机而言</p>
</blockquote>
<ul>
<li>更高效的利用系统资源</li>
<li>更快的启动时间</li>
<li>一致的运行环境<ul>
<li>这个我认为最重要，在开发，测试，生产保持环境一致，不会因为系统导致 <em>“这段代码在我机器上没问题啊”</em> 这类问题。</li>
</ul>
</li>
<li>持续交付和部署</li>
<li>更轻松的迁移<ul>
<li>Docker 可以在很多平台上运行，无论是物理机、虚拟机、公有云、私有云，甚至是笔记本，其运行结果是一致的。</li>
</ul>
</li>
<li>更轻松的维护和扩展</li>
</ul>
<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/image.html" target="_blank" rel="external">Docker 镜像</a> (Image)</p>
<blockquote>
<p>Docker 镜像是一个特殊的文件系统，是由一组文件系统组成，或者说，由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p>
</blockquote>
</li>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/container.html" target="_blank" rel="external">Docker 容器</a> (Container)</p>
<blockquote>
<p>镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的<code>类</code>和<code>实例</code>一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p>
</blockquote>
</li>
<li><p><a href="https://yeasy.gitbooks.io/docker_practice/basic_concept/repository.html" target="_blank" rel="external">Docker 仓库</a> (Registry)</p>
<blockquote>
<p>镜像构建完成后，可以很容易的在当前宿主上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，<a href="https://docs.docker.com/registry/" target="_blank" rel="external">Docker Registry</a> 就是这样的服务。</p>
<blockquote>
<p>我的理解是Docker Registry 就是一个Github，每个软件或者系统就是一个项目，项目有标签就是每个软件的版本。当然这里的Registry 也有公开服务和私有服务。</p>
</blockquote>
</blockquote>
</li>
</ul>
<ul>
<li>参考文章：<ul>
<li><a href="https://www.gitbook.com/book/yeasy/docker_practice" target="_blank" rel="external">Docker 从入门到实践</a> </li>
<li><a href="http://www.infoq.com/cn/articles/docker-container-management-libcontainer-depth-analysis" target="_blank" rel="external">Docker背后的容器管理——Libcontainer深度解析</a>  这个可以加深了解容器是什么。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h4&gt;&lt;p&gt;想要学习是我写这篇博文的原因，虽然我暂时在开发中用不到Docker，但是为了开阔视野我想也应该了解下，学习是没有坏处的&lt;/p&gt;
&lt;h4 id
    
    </summary>
    
      <category term="Docker" scheme="http://ljh.name/categories/Docker/"/>
    
    
      <category term="Docker" scheme="http://ljh.name/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Nginx反向代理和负载均衡</title>
    <link href="http://ljh.name/2017/03/23/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <id>http://ljh.name/2017/03/23/Nginx反向代理和负载均衡/</id>
    <published>2017-03-23T10:03:29.000Z</published>
    <updated>2017-03-24T03:47:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>正向代理</p>
<ul>
<li>明确知道要访问的网站</li>
<li>A服务器可以访问C，访客可以访问服务器A，不可以访问服务器C，A为代理服务器</li>
</ul>
</li>
<li><p>反向代理</p>
<ul>
<li>不知道所访问真实服务器</li>
<li>访客可以访问服务器A，服务器A无数据，服务器A从其他服务器中读取数据并且返回给访客</li>
</ul>
</li>
<li><p>负载均衡</p>
<p><code>服务器压力过大会使服务器崩溃,通过负载均衡来分担服务器压力，通过反向代理来实现的</code></p>
</li>
<li><p>Nginx 负载均衡的实现</p>
<ul>
<li>Nginx可以通过反向代理实现负载均衡，用户的访问首先会访问到Nginx服务器，然后Nginx选择压力较小的服务器，并且访问的是未崩溃的服务器。</li>
<li>upstream name 配置代理服务器</li>
</ul>
</li>
<li><p>HTTP Upstream 模块</p>
<ul>
<li>Upstream 模块是Nginx服务器的一个重要模块，Upstream模块实现在轮询和客户端IP之间实现后端的负载均衡</li>
<li>常用指令ip_hash, server, Upstream</li>
<li>ip_hash：在负载均衡系统中，假如用户在某台服务器上登录，那么如果该用户第二次请求时候，因为负载均衡系统，每次请求都会重新定位到一个新服务器，显然不可以，可以采用Ip_hash指令解决这个问题，第二次请求会通过哈希算法自动定位到第一次登录的服务器。</li>
<li>server：server指令主要用于指定服务器的名称和参数，通过参数设置不同服务器的权重</li>
<li>upstream：主要是用于设置一组可以在proxy_pass和fastcgi_pass指令中使用代理服务器，默认负载均衡方式为轮询</li>
</ul>
</li>
<li><p>其他负载均衡的方法</p>
<ul>
<li>除了使用Nginx服务器实现外，还有很多方式，软件实现和硬件实现，软件分服务器软件、系统软件、应用软件，根据反向代理的中间相关。</li>
</ul>
</li>
<li><p>负载均衡实现小结</p>
<ul>
<li><p>硬件实现负载均衡：效率高，成本高</p>
</li>
<li><p>软件实现负载均衡：效率相对低，成本低（nginx）</p>
<p>​</p>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;正向代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;明确知道要访问的网站&lt;/li&gt;
&lt;li&gt;A服务器可以访问C，访客可以访问服务器A，不可以访问服务器C，A为代理服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;反向代理&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不知道所访问真实服
    
    </summary>
    
      <category term="Nginx" scheme="http://ljh.name/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://ljh.name/tags/Nginx/"/>
    
      <category term="反向代理" scheme="http://ljh.name/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
      <category term="负载均衡" scheme="http://ljh.name/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建HEXO</title>
    <link href="http://ljh.name/2017/03/21/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAHEXO/"/>
    <id>http://ljh.name/2017/03/21/从零开始搭建HEXO/</id>
    <published>2017-03-21T02:54:50.000Z</published>
    <updated>2017-03-24T04:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>一直有搭建个人博客的想法，并几次都付诸行动，以前用过<a href="https://wordpress.com/" target="_blank" rel="external">Wordpress</a>, <a href="http://typecho.org" target="_blank" rel="external">Typecho</a>，最后都因为各种原因下线或者放弃了，其中各种插件的以及部署问题已经忙的焦头烂额，最近又一次燃起了搭建个人博客的想法，通过各种产品之间的比较，最后我选中了<a href="https://hexo.io" target="_blank" rel="external">Hexo</a>，选中它的最大原因是因为不需要数据库，而且对环境要求较少。</p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>我使用Mac系统，安装Hexo时候的版本是hexo: 3.2.2，其他系统替换相应命令即可。</p>
<h4 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h4><p>虽然Hexo对环境要求较少，但是安装前还是需要一些准备的</p>
<ul>
<li>Node.js<ul>
<li>Windows：<a href="https://nodejs.org/" target="_blank" rel="external">nodejs</a>官网安装</li>
<li>Mac：brew install node</li>
<li>Linux：curl <a href="https://raw.github.com/creationix/nvm/master/install.sh" target="_blank" rel="external">https://raw.github.com/creationix/nvm/master/install.sh</a> | sh</li>
</ul>
</li>
<li>Git<ul>
<li>Windows：下载安装  <a href="https://git-scm.com/download/win" target="_blank" rel="external">git</a></li>
<li>Mac： brew install git</li>
<li>Linux：sudo apt-get install git</li>
</ul>
</li>
<li>Github：如果有就忽略，没有去注册个<a href="https://www.github.com" target="_blank" rel="external">github</a></li>
</ul>
<h4 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h4><p>前面的准备完成就开始正式安装Hexo，在终端输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>安装完成输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo -v</div><div class="line">hexo: 3.2.2</div></pre></td></tr></table></figure>
<p>出现hexo版本就安装成功了。</p>
<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>输入如下命令，<folder> 项目目录名称：</folder></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ hexo init &lt;folder&gt;</div><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ npm install</div></pre></td></tr></table></figure>
<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo g <span class="comment"># 或者hexo generate</span></div></pre></td></tr></table></figure>
<p>启动本地web服务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo s <span class="comment"># 或者hexo server</span></div></pre></td></tr></table></figure>
<p>在浏览器访问<a href="http://localhost:4000，就可以看到博客了" target="_blank" rel="external">http://localhost:4000，就可以看到博客了</a></p>
<p>常用命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></div><div class="line">$ hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面 例如about /source/about/index.md</span></div></pre></td></tr></table></figure>
<h4 id="Hexo-主题安装"><a href="#Hexo-主题安装" class="headerlink" title="Hexo 主题安装"></a>Hexo 主题安装</h4><p>我使用的是<a href="https://github.com/Ben02/hexo-theme-Anatole" target="_blank" rel="external">Anatole</a>这个主题，更多主题可以在<a href="https://hexo.io/themes/" target="_blank" rel="external">官网主题</a>选择，以下是主题安装方式：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</div><div class="line">$ git <span class="built_in">clone</span> https://github.com/Ben02/hexo-theme-Anatole theme/anatole</div></pre></td></tr></table></figure>
<p>启用主题</p>
<p>在根目录的_config.yml配置中的theme属性，将其设置为anatole，主题所有的配置在<code>:</code>后都要有一个空格</p>
<p>更新主题</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> theme/anatole</div><div class="line">$ git pull</div><div class="line">$ hexo g <span class="comment">#生成静态</span></div><div class="line">$ hexo s <span class="comment">#启动本地web服务</span></div></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:4000，就可以看见新的主题了" target="_blank" rel="external">http://localhost:4000，就可以看见新的主题了</a></p>
<h4 id="Github-Pages-设置"><a href="#Github-Pages-设置" class="headerlink" title="Github Pages 设置"></a>Github Pages 设置</h4><p><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a> 本用于介绍托管在GitHub的项目，不过，由于他的空间免费稳定，可以用来用来做搭建一个博客</p>
<p>每个帐号只能有一个仓库来存放个人主页，而且仓库的名字必须是username/username.github.io，这是特殊的命名约定。你可以通过<a href="http://username.github.io/" target="_blank" rel="external">http://username.github.io</a> 来访问你的个人主页。</p>
<p>这里特别提醒一下，需要注意的个人主页的网站内容是在master分支下的，而且只能在master分支。</p>
<p>申请方式可以建立其他的仓库一样，只要把以<a href="http://username.github.io来命名就可以了（username" target="_blank" rel="external">http://username.github.io来命名就可以了（username</a> 即你的账户名）。</p>
<p>下面就开始部署本地的博客到github：</p>
<ul>
<li><p>打开根目录的_config.yml，文件找到Deployment，配置如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:                                                                              </div><div class="line">  <span class="built_in">type</span>: git                                                                                                                                                 </div><div class="line">  repo: https://github.com/username/username.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure>
</li>
<li><p>保存后执行如下命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save <span class="comment"># 部署到远程需要安装的包</span></div><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy <span class="comment"># Hexo部署到远程</span></div></pre></td></tr></table></figure>
<p>这时查看代码库就可以看到代码已经在github上了，访问<a href="http://username.github.io" target="_blank" rel="external">http://username.github.io</a>   就可以看到你的博客了</p>
</li>
</ul>
<h4 id="如何用自己的域名来访问博客"><a href="#如何用自己的域名来访问博客" class="headerlink" title="如何用自己的域名来访问博客"></a>如何用自己的域名来访问博客</h4><p>在source目录下添加CNAME文件，操作步骤如下</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> <span class="built_in">source</span>/</div><div class="line">$ vim CNAME <span class="comment"># 输入你的域名在CNAME文件下</span></div><div class="line">$ hexo clean <span class="comment"># 返回根目录执行</span></div><div class="line">$ hexo generate</div><div class="line">$ hexo deploy <span class="comment"># Hexo部署到远程</span></div></pre></td></tr></table></figure>
<p>添加解析</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">记录类型 	主机记录 	解析线路(运营商) 	记录值	</div><div class="line">CNAME	     www	       默认	username.github.io</div></pre></td></tr></table></figure>
<p>如果不生效添加</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">记录类型 	主机记录 	解析线路(运营商) 	记录值	</div><div class="line">	A	     @	       默认	        192.30.252.154</div><div class="line">	A	     @	       默认	        192.30.252.153</div></pre></td></tr></table></figure>
<p>访问你的域名就可以看到你的博客了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h3&gt;&lt;p&gt;一直有搭建个人博客的想法，并几次都付诸行动，以前用过&lt;a href=&quot;https://wordpress.com/&quot; target=&quot;_bl
    
    </summary>
    
    
      <category term="Hexo" scheme="http://ljh.name/tags/Hexo/"/>
    
      <category term="Typecho" scheme="http://ljh.name/tags/Typecho/"/>
    
      <category term="Wordpress" scheme="http://ljh.name/tags/Wordpress/"/>
    
      <category term="Github" scheme="http://ljh.name/tags/Github/"/>
    
      <category term="Blog" scheme="http://ljh.name/tags/Blog/"/>
    
  </entry>
  
</feed>
